diff --git a/src/node/miner.cpp b/src/node/miner.cpp
index 7fe10ecabc..f136c7f293 100644
--- a/src/node/miner.cpp
+++ b/src/node/miner.cpp
@@ -13,34 +13,53 @@
 #include <consensus/merkle.h>
 #include <consensus/tx_verify.h>
 #include <consensus/validation.h>
-#include <deploymentstatus.h>
-#include <policy/feerate.h>
 #include <policy/policy.h>
 #include <pow.h>
 #include <primitives/transaction.h>
+#include <rpc/blockchain.h>
 #include <timedata.h>
+#include <rpc/blockchain.h>
 #include <util/moneystr.h>
 #include <util/system.h>
+#include <util/threadnames.h>
+#include <util/translation.h>
 #include <validation.h>
+#include <kernel.h>
+#include <net.h>
+#include <interfaces/chain.h>
+#include <node/context.h>
+#include <node/ui_interface.h>
+#include <util/thread.h>
+#include <validation.h>
+#include <wallet/wallet.h>
+#include <wallet/coincontrol.h>
+#include <warnings.h>
+#include <wallet/spend.h>
+#include <wallet/wallet.h>
 
 #include <algorithm>
 #include <utility>
 
+#include <boost/thread.hpp>
+
+using wallet::CWallet;
+using wallet::COutput;
+using wallet::CCoinControl;
+using wallet::ReserveDestination;
+
+int64_t nLastCoinStakeSearchInterval = 0;
+std::thread m_minter_thread;
+
 namespace node {
-int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)
+int64_t UpdateTime(CBlockHeader* pblock)
 {
     int64_t nOldTime = pblock->nTime;
-    int64_t nNewTime = std::max(pindexPrev->GetMedianTimePast() + 1, GetAdjustedTime());
+    int64_t nNewTime = std::max(pblock->GetBlockTime(), GetAdjustedTime());
 
     if (nOldTime < nNewTime) {
         pblock->nTime = nNewTime;
     }
 
-    // Updating time can change work required on testnet:
-    if (consensusParams.fPowAllowMinDifficultyBlocks) {
-        pblock->nBits = GetNextWorkRequired(pindexPrev, pblock, consensusParams);
-    }
-
     return nNewTime - nOldTime;
 }
 
@@ -58,7 +77,6 @@ void RegenerateCommitments(CBlock& block, ChainstateManager& chainman)
 
 BlockAssembler::Options::Options()
 {
-    blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);
     nBlockMaxWeight = DEFAULT_BLOCK_MAX_WEIGHT;
 }
 
@@ -67,7 +85,6 @@ BlockAssembler::BlockAssembler(CChainState& chainstate, const CTxMemPool& mempoo
       m_mempool(mempool),
       m_chainstate(chainstate)
 {
-    blockMinFeeRate = options.blockMinFeeRate;
     // Limit weight to between 4K and MAX_BLOCK_WEIGHT-4K for sanity:
     nBlockMaxWeight = std::max<size_t>(4000, std::min<size_t>(MAX_BLOCK_WEIGHT - 4000, options.nBlockMaxWeight));
 }
@@ -78,12 +95,6 @@ static BlockAssembler::Options DefaultOptions()
     // If -blockmaxweight is not given, limit to DEFAULT_BLOCK_MAX_WEIGHT
     BlockAssembler::Options options;
     options.nBlockMaxWeight = gArgs.GetIntArg("-blockmaxweight", DEFAULT_BLOCK_MAX_WEIGHT);
-    if (gArgs.IsArgSet("-blockmintxfee")) {
-        std::optional<CAmount> parsed = ParseMoney(gArgs.GetArg("-blockmintxfee", ""));
-        options.blockMinFeeRate = CFeeRate{parsed.value_or(DEFAULT_BLOCK_MIN_TX_FEE)};
-    } else {
-        options.blockMinFeeRate = CFeeRate{DEFAULT_BLOCK_MIN_TX_FEE};
-    }
     return options;
 }
 
@@ -104,7 +115,8 @@ void BlockAssembler::resetBlock()
     nFees = 0;
 }
 
-std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)
+// peercoin: if pwallet != NULL it will attempt to create coinstake
+std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn, CWallet* pwallet, bool* pfPoSCancel, NodeContext* m_node)
 {
     int64_t nTimeStart = GetTimeMicros();
 
@@ -116,25 +128,67 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc
         return nullptr;
     }
     CBlock* const pblock = &pblocktemplate->block; // pointer for convenience
+    pblock->nTime = GetAdjustedTime();
+
+    LOCK2(cs_main, m_mempool.cs);
+
+    CBlockIndex* pindexPrev = m_node->chainman->ActiveChain().Tip();
+    assert(pindexPrev != nullptr);
+    nHeight = pindexPrev->nHeight + 1;
+
+    // Create coinbase transaction.
+    CMutableTransaction coinbaseTx;
+    coinbaseTx.vin.resize(1);
+    coinbaseTx.vin[0].prevout.SetNull();
+    coinbaseTx.vout.resize(1);
+    coinbaseTx.vout[0].scriptPubKey = scriptPubKeyIn;
+
+    if (pwallet == nullptr) {
+        pblock->nBits = GetNextTargetRequired(pindexPrev, false, chainparams.GetConsensus());
+        coinbaseTx.vout[0].nValue = GetProofOfWorkReward(pblock->nBits, pblock->nTime);
+        }
 
     // Add dummy coinbase tx as first transaction
     pblock->vtx.emplace_back();
     pblocktemplate->vTxFees.push_back(-1); // updated at end
     pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end
 
-    LOCK2(cs_main, m_mempool.cs);
-    CBlockIndex* pindexPrev = m_chainstate.m_chain.Tip();
-    assert(pindexPrev != nullptr);
-    nHeight = pindexPrev->nHeight + 1;
+    // peercoin: if coinstake available add coinstake tx
+    static int64_t nLastCoinStakeSearchTime = GetAdjustedTime();  // only initialized at startup
+
+    if (pwallet)  // attemp to find a coinstake
+    {
+        *pfPoSCancel = true;
+        pblock->nBits = GetNextTargetRequired(pindexPrev, true, chainparams.GetConsensus());
+        CMutableTransaction txCoinStake;
+        int64_t nSearchTime = txCoinStake.nTime; // search to current time
+        if (nSearchTime > nLastCoinStakeSearchTime)
+        {
+            if (pwallet->CreateCoinStake(*m_node->chainman, pwallet, pblock->nBits, nSearchTime-nLastCoinStakeSearchTime, txCoinStake))
+            {
+                if (txCoinStake.nTime >= std::max(pindexPrev->GetMedianTimePast()+1, pindexPrev->GetBlockTime() - (IsProtocolV09(pindexPrev->GetBlockTime()) ? MAX_FUTURE_BLOCK_TIME : MAX_FUTURE_BLOCK_TIME_PREV9)))
+                {   // make sure coinstake would meet timestamp protocol
+                    // as it would be the same as the block timestamp
+                    coinbaseTx.vout[0].SetEmpty();
+                    coinbaseTx.nTime = txCoinStake.nTime;
+                    pblock->vtx.push_back(MakeTransactionRef(CTransaction(txCoinStake)));
+                    *pfPoSCancel = false;
+                }
+            }
+            nLastCoinStakeSearchInterval = nSearchTime - nLastCoinStakeSearchTime;
+            nLastCoinStakeSearchTime = nSearchTime;
+        }
+        if (*pfPoSCancel)
+            return nullptr; // peercoin: there is no point to continue if we failed to create coinstake
+        pblock->nFlags = CBlockIndex::BLOCK_PROOF_OF_STAKE;
+    }
 
-    pblock->nVersion = g_versionbitscache.ComputeBlockVersion(pindexPrev, chainparams.GetConsensus());
     // -regtest only: allow overriding block.nVersion with
     // -blockversion=N to test forking scenarios
     if (chainparams.MineBlocksOnDemand()) {
         pblock->nVersion = gArgs.GetIntArg("-blockversion", pblock->nVersion);
     }
 
-    pblock->nTime = GetAdjustedTime();
     m_lock_time_cutoff = pindexPrev->GetMedianTimePast();
 
     // Decide whether to include witness transactions
@@ -146,40 +200,38 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc
     // not activated.
     // TODO: replace this with a call to main to assess validity of a mempool
     // transaction (which in most cases can be a no-op).
-    fIncludeWitness = DeploymentActiveAfter(pindexPrev, chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT);
+    fIncludeWitness = IsBTC16BIPsEnabled(pindexPrev->nTime);
 
     int nPackagesSelected = 0;
     int nDescendantsUpdated = 0;
-    addPackageTxs(nPackagesSelected, nDescendantsUpdated);
+    addPackageTxs(nPackagesSelected, nDescendantsUpdated, pblock->nTime);
 
     int64_t nTime1 = GetTimeMicros();
 
     m_last_block_num_txs = nBlockTx;
     m_last_block_weight = nBlockWeight;
 
-    // Create coinbase transaction.
-    CMutableTransaction coinbaseTx;
-    coinbaseTx.vin.resize(1);
-    coinbaseTx.vin[0].prevout.SetNull();
-    coinbaseTx.vout.resize(1);
-    coinbaseTx.vout[0].scriptPubKey = scriptPubKeyIn;
-    coinbaseTx.vout[0].nValue = nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus());
     coinbaseTx.vin[0].scriptSig = CScript() << nHeight << OP_0;
     pblock->vtx[0] = MakeTransactionRef(std::move(coinbaseTx));
-    pblocktemplate->vchCoinbaseCommitment = GenerateCoinbaseCommitment(*pblock, pindexPrev, chainparams.GetConsensus());
+    if (fIncludeWitness)
+        pblocktemplate->vchCoinbaseCommitment = GenerateCoinbaseCommitment(*pblock, pindexPrev, chainparams.GetConsensus());
     pblocktemplate->vTxFees[0] = -nFees;
 
     LogPrintf("CreateNewBlock(): block weight: %u txs: %u fees: %ld sigops %d\n", GetBlockWeight(*pblock), nBlockTx, nFees, nBlockSigOpsCost);
 
     // Fill in header
     pblock->hashPrevBlock  = pindexPrev->GetBlockHash();
-    UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev);
-    pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, chainparams.GetConsensus());
+    if (pblock->IsProofOfStake())
+        pblock->nTime      = pblock->vtx[1]->nTime; //same as coinstake timestamp
+    pblock->nTime          = std::max(pindexPrev->GetMedianTimePast()+1, pblock->GetMaxTransactionTime());
+    pblock->nTime          = std::max(pblock->GetBlockTime(), pindexPrev->GetBlockTime() - (IsProtocolV09(pindexPrev->GetBlockTime()) ? MAX_FUTURE_BLOCK_TIME : MAX_FUTURE_BLOCK_TIME_PREV9));
+    if (pblock->IsProofOfWork())
+        UpdateTime(pblock);
     pblock->nNonce         = 0;
     pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*pblock->vtx[0]);
 
     BlockValidationState state;
-    if (!TestBlockValidity(state, chainparams, m_chainstate, *pblock, pindexPrev, false, false)) {
+    if (pwallet && !TestBlockValidity(state, chainparams, m_chainstate, *pblock, pindexPrev, false, false)) {
         throw std::runtime_error(strprintf("%s: TestBlockValidity failed: %s", __func__, state.ToString()));
     }
     int64_t nTime2 = GetTimeMicros();
@@ -217,7 +269,7 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost
 // - transaction finality (locktime)
 // - premature witness (in case segwit transactions are added to mempool before
 //   segwit activation)
-bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package) const
+bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package, uint32_t nTime) const
 {
     for (CTxMemPool::txiter it : package) {
         if (!IsFinalTx(it->GetTx(), nHeight, m_lock_time_cutoff)) {
@@ -225,6 +277,10 @@ bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& packa
         }
         if (!fIncludeWitness && it->GetTx().HasWitness()) {
             return false;
+
+        // peercoin: timestamp limit
+        if (it->GetTx().nTime > GetAdjustedTime() || (nTime && it->GetTx().nTime > nTime))
+            return false;
         }
     }
     return true;
@@ -243,8 +299,8 @@ void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)
 
     bool fPrintPriority = gArgs.GetBoolArg("-printpriority", DEFAULT_PRINTPRIORITY);
     if (fPrintPriority) {
-        LogPrintf("fee rate %s txid %s\n",
-                  CFeeRate(iter->GetModifiedFee(), iter->GetTxSize()).ToString(),
+        LogPrintf("fee %d satoshi txid %s\n",
+                  iter->GetModifiedFee(),
                   iter->GetTx().GetHash().ToString());
     }
 }
@@ -317,7 +373,7 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve
 // Each time through the loop, we compare the best transaction in
 // mapModifiedTxs with the next transaction in the mempool to decide what
 // transaction package to work on next.
-void BlockAssembler::addPackageTxs(int& nPackagesSelected, int& nDescendantsUpdated)
+void BlockAssembler::addPackageTxs(int& nPackagesSelected, int& nDescendantsUpdated, uint32_t nTime)
 {
     AssertLockHeld(m_mempool.cs);
 
@@ -379,19 +435,12 @@ void BlockAssembler::addPackageTxs(int& nPackagesSelected, int& nDescendantsUpda
         assert(!inBlock.count(iter));
 
         uint64_t packageSize = iter->GetSizeWithAncestors();
-        CAmount packageFees = iter->GetModFeesWithAncestors();
         int64_t packageSigOpsCost = iter->GetSigOpCostWithAncestors();
         if (fUsingModified) {
             packageSize = modit->nSizeWithAncestors;
-            packageFees = modit->nModFeesWithAncestors;
             packageSigOpsCost = modit->nSigOpCostWithAncestors;
         }
 
-        if (packageFees < blockMinFeeRate.GetFee(packageSize)) {
-            // Everything else we might consider has a lower fee rate
-            return;
-        }
-
         if (!TestPackage(packageSize, packageSigOpsCost)) {
             if (fUsingModified) {
                 // Since we always look at the best entry in mapModifiedTx,
@@ -420,7 +469,7 @@ void BlockAssembler::addPackageTxs(int& nPackagesSelected, int& nDescendantsUpda
         ancestors.insert(iter);
 
         // Test if all tx's are Final
-        if (!TestPackageTransactions(ancestors)) {
+        if (!TestPackageTransactions(ancestors,nTime)) {
             if (fUsingModified) {
                 mapModifiedTx.get<ancestor_score>().erase(modit);
                 failedTx.insert(iter);
@@ -465,4 +514,208 @@ void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned
     pblock->vtx[0] = MakeTransactionRef(std::move(txCoinbase));
     pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);
 }
+
+
+static bool ProcessBlockFound(const CBlock* pblock, const CChainParams& chainparams, NodeContext& m_node)
+{
+    LogPrintf("%s\n", pblock->ToString());
+    LogPrintf("generated %s\n", FormatMoney(pblock->vtx[0]->vout[0].nValue));
+
+    // Found a solution
+    {
+        LOCK(cs_main);
+        if (pblock->hashPrevBlock != m_node.chainman->ActiveChain().Tip()->GetBlockHash())
+            return error("PeercoinMiner: generated block is stale");
+    }
+
+    // Process this block the same as if we had received it from another node
+    std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);
+    if (!m_node.chainman->ProcessNewBlock(Params(), shared_pblock, true, NULL))
+        return error("ProcessNewBlock, block not accepted");
+
+    return true;
+}
+
+void PoSMiner(std::shared_ptr<CWallet> pwallet, NodeContext& m_node)
+{
+    CConnman* connman = m_node.connman.get();
+    LogPrintf("CPUMiner started for proof-of-stake\n");
+    util::ThreadRename("peercoin-stake-minter");
+
+    unsigned int nExtraNonce = 0;
+
+    OutputType output_type = pwallet->m_default_change_type ? *pwallet->m_default_change_type : pwallet->m_default_address_type;
+    ReserveDestination reservedest(pwallet.get(), output_type);
+    CTxDestination dest;
+    // Compute timeout for pos as sqrt(numUTXO)
+    unsigned int pos_timio;
+    {
+        LOCK2(pwallet->cs_wallet, cs_main);
+        bilingual_str dest_err;
+        if (!reservedest.GetReservedDestination(dest, true, dest_err))
+            throw std::runtime_error("Error: Keypool ran out, please call keypoolrefill first.");
+
+        std::vector<COutput> vCoins;
+        CCoinControl coincontrol;
+        AvailableCoins(*pwallet, vCoins, &coincontrol);
+        pos_timio = 500 + 30 * sqrt(vCoins.size());
+        LogPrintf("Set proof-of-stake timeout: %ums for %u UTXOs\n", pos_timio, vCoins.size());
+    }
+
+    std::string strMintMessage = _("Info: Minting suspended due to locked wallet.").translated;
+    std::string strMintSyncMessage = _("Info: Minting suspended while synchronizing wallet.").translated;
+    std::string strMintDisabledMessage = _("Info: Minting disabled by 'nominting' option.").translated;
+    std::string strMintBlockMessage = _("Info: Minting suspended due to block creation failure.").translated;
+    std::string strMintEmpty = "";
+    if (!gArgs.GetBoolArg("-minting", true) || !gArgs.GetBoolArg("-staking", true))
+    {
+        strMintWarning = strMintDisabledMessage;
+        LogPrintf("proof-of-stake minter disabled\n");
+        return;
+    }
+
+    try {
+        bool fNeedToClear = false;
+        while (true) {
+            while (pwallet->IsLocked()) {
+                if (strMintWarning != strMintMessage) {
+                    strMintWarning = strMintMessage;
+                    uiInterface.NotifyAlertChanged(uint256(), CT_UPDATED);
+                }
+                fNeedToClear = true;
+                if (!connman->interruptNet.sleep_for(std::chrono::seconds(3)))
+                    return;
+            }
+
+            if (Params().MiningRequiresPeers()) {
+                // Busy-wait for the network to come online so we don't waste time mining
+                // on an obsolete chain. In regtest mode we expect to fly solo.
+                while(connman == nullptr || connman->GetNodeCount(ConnectionDirection::Both) == 0 || m_node.chainman->ActiveChainstate().IsInitialBlockDownload()) {
+                    while(connman == nullptr) {UninterruptibleSleep(1s);}
+                    if (!connman->interruptNet.sleep_for(std::chrono::seconds(10)))
+                        return;
+                    }
+            }
+
+            while (GuessVerificationProgress(Params().TxData(), m_node.chainman->ActiveChain().Tip()) < 0.996)
+            {
+                LogPrintf("Minter thread sleeps while sync at %f\n", GuessVerificationProgress(Params().TxData(), m_node.chainman->ActiveChain().Tip()));
+                if (strMintWarning != strMintSyncMessage) {
+                    strMintWarning = strMintSyncMessage;
+                    uiInterface.NotifyAlertChanged(uint256(), CT_UPDATED);
+                }
+                fNeedToClear = true;
+                if (!connman->interruptNet.sleep_for(std::chrono::seconds(10)))
+                        return;
+            }
+            if (fNeedToClear) {
+                strMintWarning = strMintEmpty;
+                uiInterface.NotifyAlertChanged(uint256(), CT_UPDATED);
+                fNeedToClear = false;
+            }
+
+            //
+            // Create new block
+            //
+            CBlockIndex* pindexPrev = m_node.chainman->ActiveChain().Tip();
+            bool fPoSCancel = false;
+            CScript scriptPubKey = GetScriptForDestination(dest);
+            CBlock *pblock;
+            std::unique_ptr<CBlockTemplate> pblocktemplate;
+
+            {
+                LOCK2(pwallet->cs_wallet, cs_main);
+                try {
+                    pblocktemplate = BlockAssembler(m_node.chainman->ActiveChainstate(), *m_node.mempool, Params()).CreateNewBlock(scriptPubKey, pwallet.get(), &fPoSCancel, &m_node);
+                }
+                catch (const std::runtime_error &e)
+                {
+                    LogPrintf("PeercoinMiner runtime error: %s\n", e.what());
+                    continue;
+                }
+            }
+
+            if (!pblocktemplate.get())
+            {
+                if (fPoSCancel == true)
+                {
+                    if (!connman->interruptNet.sleep_for(std::chrono::milliseconds(pos_timio)))
+                        return;
+                    continue;
+                }
+                strMintWarning = strMintBlockMessage;
+                uiInterface.NotifyAlertChanged(uint256(), CT_UPDATED);
+                LogPrintf("Error in PeercoinMiner: Keypool ran out, please call keypoolrefill before restarting the mining thread\n");
+                if (!connman->interruptNet.sleep_for(std::chrono::seconds(10)))
+                   return;
+
+                return;
+            }
+            pblock = &pblocktemplate->block;
+            IncrementExtraNonce(pblock, pindexPrev, nExtraNonce);
+
+            // peercoin: if proof-of-stake block found then process block
+            if (pblock->IsProofOfStake())
+            {
+                {
+                    LOCK2(pwallet->cs_wallet, cs_main);
+                    if (!SignBlock(*pblock, *pwallet))
+                    {
+                        LogPrintf("PoSMiner(): failed to sign PoS block");
+                        continue;
+                    }
+                }
+                LogPrintf("CPUMiner : proof-of-stake block found %s\n", pblock->GetHash().ToString());
+                try {
+                    ProcessBlockFound(pblock, Params(), m_node);
+                    }
+                catch (const std::runtime_error &e)
+                {
+                    LogPrintf("PeercoinMiner runtime error: %s\n", e.what());
+                    continue;
+                }
+                reservedest.KeepDestination();
+                // Rest for ~3 minutes after successful block to preserve close quick
+                if (!connman->interruptNet.sleep_for(std::chrono::seconds(60 + GetRand(4))))
+                    return;
+            }
+            if (!connman->interruptNet.sleep_for(std::chrono::milliseconds(pos_timio)))
+                return;
+
+            continue;
+        }
+    }
+    catch (::boost::thread_interrupted)
+    {
+        LogPrintf("PeercoinMiner terminated\n");
+        return;
+    }
+    catch (const std::runtime_error &e)
+    {
+        LogPrintf("PeercoinMiner runtime error: %s\n", e.what());
+        return;
+    }
+}
+
+// peercoin: stake minter thread
+void static ThreadStakeMinter(std::shared_ptr<CWallet> pwallet, NodeContext& m_node)
+{
+    LogPrintf("ThreadStakeMinter started\n");
+    try
+    {
+        PoSMiner(pwallet, m_node);
+    }
+    catch (std::exception& e) {
+        PrintExceptionContinue(&e, "ThreadStakeMinter()");
+    } catch (...) {
+        PrintExceptionContinue(NULL, "ThreadStakeMinter()");
+    }
+    LogPrintf("ThreadStakeMinter exiting\n");
+}
+
+// peercoin: stake minter
+void MintStake(std::shared_ptr<CWallet> pwallet, NodeContext& m_node)
+{
+    m_minter_thread = std::thread([&] { util::TraceThread("minter", [&] { ThreadStakeMinter(pwallet, m_node); }); });
+}
 } // namespace node
