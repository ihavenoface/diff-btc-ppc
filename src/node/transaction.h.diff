diff --git a/src/node/transaction.h b/src/node/transaction.h
index b7cf225636..32c47378a5 100644
--- a/src/node/transaction.h
+++ b/src/node/transaction.h
@@ -6,7 +6,6 @@
 #define BITCOIN_NODE_TRANSACTION_H
 
 #include <attributes.h>
-#include <policy/feerate.h>
 #include <primitives/transaction.h>
 #include <util/error.h>
 
@@ -19,13 +18,6 @@ struct Params;
 namespace node {
 struct NodeContext;
 
-/** Maximum fee rate for sendrawtransaction and testmempoolaccept RPC calls.
- * Also used by the GUI when broadcasting a completed PSBT.
- * By default, a transaction with a fee rate higher than this will be rejected
- * by these RPCs and the GUI. This can be overridden with the maxfeerate argument.
- */
-static const CFeeRate DEFAULT_MAX_RAW_TX_FEE_RATE{COIN / 10};
-
 /**
  * Submit a transaction to the mempool and (optionally) relay it to all P2P peers.
  *
@@ -38,12 +30,11 @@ static const CFeeRate DEFAULT_MAX_RAW_TX_FEE_RATE{COIN / 10};
  * @param[in]  node reference to node context
  * @param[in]  tx the transaction to broadcast
  * @param[out] err_string reference to std::string to fill with error string if available
- * @param[in]  max_tx_fee reject txs with fees higher than this (if 0, accept any fee)
  * @param[in]  relay flag if both mempool insertion and p2p relay are requested
  * @param[in]  wait_callback wait until callbacks have been processed to avoid stale result due to a sequentially RPC.
  * return error
  */
-[[nodiscard]] TransactionError BroadcastTransaction(NodeContext& node, CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback);
+[[nodiscard]] TransactionError BroadcastTransaction(NodeContext& node, CTransactionRef tx, std::string& err_string, bool relay, bool wait_callback);
 
 /**
  * Return transaction with a given hash.
