diff --git a/src/interfaces/chain.h b/src/interfaces/chain.h
index ddfb4bda95..f02cbb5638 100644
--- a/src/interfaces/chain.h
+++ b/src/interfaces/chain.h
@@ -5,6 +5,7 @@
 #ifndef BITCOIN_INTERFACES_CHAIN_H
 #define BITCOIN_INTERFACES_CHAIN_H
 
+#include <node/chainstate.h>
 #include <primitives/transaction.h> // For CTransactionRef
 #include <util/settings.h>          // For util::SettingsValue
 
@@ -18,16 +19,13 @@
 
 class ArgsManager;
 class CBlock;
-class CFeeRate;
 class CRPCCommand;
 class CScheduler;
 class Coin;
 class uint256;
 enum class MemPoolRemovalReason;
-enum class RBFTransactionState;
 struct bilingual_str;
 struct CBlockLocator;
-struct FeeCalculation;
 namespace node {
 struct NodeContext;
 } // namespace node
@@ -96,6 +94,8 @@ class Chain
 public:
     virtual ~Chain() {}
 
+    virtual ChainstateManager& chainman() = 0;
+
     //! Get current chain height, not including genesis block (returns 0 if
     //! chain only contains genesis block, nullopt if chain does not contain
     //! any blocks)
@@ -104,8 +104,7 @@ public:
     //! Get block hash. Height must be valid or this function will abort.
     virtual uint256 getBlockHash(int height) = 0;
 
-    //! Check that the block is available on disk (i.e. has not been
-    //! pruned), and contains transactions.
+    //! Check that the block is available on disk, and contains transactions.
     virtual bool haveBlockOnDisk(int height) = 0;
 
     //! Get locator for the current chain tip.
@@ -158,9 +157,6 @@ public:
     //! the height range from min_height to max_height, inclusive.
     virtual bool hasBlocks(const uint256& block_hash, int min_height = 0, std::optional<int> max_height = {}) = 0;
 
-    //! Check if transaction is RBF opt in.
-    virtual RBFTransactionState isRBFOptIn(const CTransaction& tx) = 0;
-
     //! Check if transaction is in mempool.
     virtual bool isInMempool(const uint256& txid) = 0;
 
@@ -171,7 +167,6 @@ public:
     //! amount specified by max_tx_fee, and broadcast to all peers if relay is set to true.
     //! Return false if the transaction could not be added due to the fee or for another reason.
     virtual bool broadcastTransaction(const CTransactionRef& tx,
-        const CAmount& max_tx_fee,
         bool relay,
         std::string& err_string) = 0;
 
@@ -186,27 +181,6 @@ public:
     //! Check if transaction will pass the mempool's chain limits.
     virtual bool checkChainLimits(const CTransactionRef& tx) = 0;
 
-    //! Estimate smart fee.
-    virtual CFeeRate estimateSmartFee(int num_blocks, bool conservative, FeeCalculation* calc = nullptr) = 0;
-
-    //! Fee estimator max target.
-    virtual unsigned int estimateMaxBlocks() = 0;
-
-    //! Mempool minimum fee.
-    virtual CFeeRate mempoolMinFee() = 0;
-
-    //! Relay current minimum fee (from -minrelaytxfee and -incrementalrelayfee settings).
-    virtual CFeeRate relayMinFee() = 0;
-
-    //! Relay incremental fee setting (-incrementalrelayfee), reflecting cost of relay.
-    virtual CFeeRate relayIncrementalFee() = 0;
-
-    //! Relay dust fee setting (-dustrelayfee), reflecting lowest rate it's economical to spend.
-    virtual CFeeRate relayDustFee() = 0;
-
-    //! Check if any block has been pruned.
-    virtual bool havePruned() = 0;
-
     //! Check if the node is ready to broadcast transactions.
     virtual bool isReadyToBroadcast() = 0;
 
