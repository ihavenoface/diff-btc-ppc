diff --git a/src/validationinterface.h b/src/validationinterface.h
index 7c3ce00fbc..e39edbf3e1 100644
--- a/src/validationinterface.h
+++ b/src/validationinterface.h
@@ -79,99 +79,98 @@ class CValidationInterface {
 protected:
     /**
      * Protected destructor so that instances can only be deleted by derived classes.
      * If that restriction is no longer desired, this should be made public and virtual.
      */
     ~CValidationInterface() = default;
     /**
      * Notifies listeners when the block chain tip advances.
      *
      * When multiple blocks are connected at once, UpdatedBlockTip will be called on the final tip
      * but may not be called on every intermediate tip. If the latter behavior is desired,
      * subscribe to BlockConnected() instead.
      *
      * Called on a background thread.
      */
     virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}
     /**
      * Notifies listeners of a transaction having been added to mempool.
      *
      * Called on a background thread.
      */
     virtual void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t mempool_sequence) {}
 
     /**
      * Notifies listeners of a transaction leaving mempool.
      *
      * This notification fires for transactions that are removed from the
      * mempool for the following reasons:
      *
      * - EXPIRY (expired from mempool after -mempoolexpiry hours)
      * - SIZELIMIT (removed in size limiting if the mempool exceeds -maxmempool megabytes)
      * - REORG (removed during a reorg)
      * - CONFLICT (removed because it conflicts with in-block transaction)
-     * - REPLACED (removed due to RBF replacement)
      *
      * This does not fire for transactions that are removed from the mempool
      * because they have been included in a block. Any client that is interested
      * in transactions removed from the mempool for inclusion in a block can learn
      * about those transactions from the BlockConnected notification.
      *
      * Transactions that are removed from the mempool because they conflict
      * with a transaction in the new block will have
      * TransactionRemovedFromMempool events fired *before* the BlockConnected
      * event is fired. If multiple blocks are connected in one step, then the
      * ordering could be:
      *
      * - TransactionRemovedFromMempool(tx1 from block A)
      * - TransactionRemovedFromMempool(tx2 from block A)
      * - TransactionRemovedFromMempool(tx1 from block B)
      * - TransactionRemovedFromMempool(tx2 from block B)
      * - BlockConnected(A)
      * - BlockConnected(B)
      *
      * Called on a background thread.
      */
     virtual void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t mempool_sequence) {}
     /**
      * Notifies listeners of a block being connected.
      * Provides a vector of transactions evicted from the mempool as a result.
      *
      * Called on a background thread.
      */
     virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex) {}
     /**
      * Notifies listeners of a block being disconnected
      *
      * Called on a background thread.
      */
     virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex) {}
     /**
      * Notifies listeners of the new active block chain on-disk.
      *
      * Prior to this callback, any updates are not guaranteed to persist on disk
      * (ie clients need to handle shutdown/restart safety by being able to
      * understand when some updates were lost due to unclean shutdown).
      *
      * When this callback is invoked, the validation changes done by any prior
      * callback are guaranteed to exist on disk and survive a restart, including
      * an unclean shutdown.
      *
      * Provides a locator describing the best chain, which is likely useful for
      * storing current state on disk in client DBs.
      *
      * Called on a background thread.
      */
     virtual void ChainStateFlushed(const CBlockLocator &locator) {}
     /**
      * Notifies listeners of a block validation result.
      * If the provided BlockValidationState IsValid, the provided block
      * is guaranteed to be the current best block at the time the
      * callback was generated (not necessarily now)
      */
     virtual void BlockChecked(const CBlock&, const BlockValidationState&) {}
     /**
      * Notifies listeners that a block which builds directly on our current tip
      * has been received and connected to the headers tree, though not validated yet */
     virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};
     friend class CMainSignals;
 };
