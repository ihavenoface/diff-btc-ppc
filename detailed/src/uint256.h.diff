diff --git a/src/uint256.h b/src/uint256.h
index 5c3a2f5409..967b45b9a9 100644
--- a/src/uint256.h
+++ b/src/uint256.h
@@ -22,93 +22,98 @@ protected:
     static constexpr int WIDTH = BITS / 8;
     uint8_t m_data[WIDTH];
 public:
+    const uint32_t *GetDataPtr() const
+    {
+        return (const uint32_t *)m_data;
+    }
+
     /* construct 0 value by default */
     constexpr base_blob() : m_data() {}
 
     /* constructor for constants between 1 and 255 */
     constexpr explicit base_blob(uint8_t v) : m_data{v} {}
 
     explicit base_blob(const std::vector<unsigned char>& vch);
 
     bool IsNull() const
     {
         for (int i = 0; i < WIDTH; i++)
             if (m_data[i] != 0)
                 return false;
         return true;
     }
 
     void SetNull()
     {
         memset(m_data, 0, sizeof(m_data));
     }
 
     inline int Compare(const base_blob& other) const { return memcmp(m_data, other.m_data, sizeof(m_data)); }
 
     friend inline bool operator==(const base_blob& a, const base_blob& b) { return a.Compare(b) == 0; }
     friend inline bool operator!=(const base_blob& a, const base_blob& b) { return a.Compare(b) != 0; }
     friend inline bool operator<(const base_blob& a, const base_blob& b) { return a.Compare(b) < 0; }
 
     std::string GetHex() const;
     void SetHex(const char* psz);
     void SetHex(const std::string& str);
     std::string ToString() const;
 
     const unsigned char* data() const { return m_data; }
     unsigned char* data() { return m_data; }
 
     unsigned char* begin()
     {
         return &m_data[0];
     }
 
     unsigned char* end()
     {
         return &m_data[WIDTH];
     }
 
     const unsigned char* begin() const
     {
         return &m_data[0];
     }
 
     const unsigned char* end() const
     {
         return &m_data[WIDTH];
     }
 
     static constexpr unsigned int size()
     {
         return sizeof(m_data);
     }
 
     uint64_t GetUint64(int pos) const
     {
         const uint8_t* ptr = m_data + pos * 8;
         return ((uint64_t)ptr[0]) | \
                ((uint64_t)ptr[1]) << 8 | \
                ((uint64_t)ptr[2]) << 16 | \
                ((uint64_t)ptr[3]) << 24 | \
                ((uint64_t)ptr[4]) << 32 | \
                ((uint64_t)ptr[5]) << 40 | \
                ((uint64_t)ptr[6]) << 48 | \
                ((uint64_t)ptr[7]) << 56;
     }
 
     template<typename Stream>
     void Serialize(Stream& s) const
     {
         s.write(MakeByteSpan(m_data));
     }
 
     template<typename Stream>
     void Unserialize(Stream& s)
     {
         s.read(MakeWritableByteSpan(m_data));
     }
 };
 
 /** 160-bit opaque blob.
  * @note This type is called uint160 for historical reasons only. It is an opaque
  * blob of 160 bits and has no integer operations.
  */
