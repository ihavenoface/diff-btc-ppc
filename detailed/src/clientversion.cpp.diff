diff --git a/src/clientversion.cpp b/src/clientversion.cpp
index 192e9c52bc..8d1a4511d9 100644
--- a/src/clientversion.cpp
+++ b/src/clientversion.cpp
@@ -14,34 +14,36 @@
 /**
  * Name of client reported in the 'version' message. Report the same name
  * for both bitcoind and bitcoin-qt, to make it harder for attackers to
  * target servers or GUI users specifically.
  */
 const std::string CLIENT_NAME("Satoshi");
 
+#define CLIENT_VERSION_SUFFIX " Coccinellidae"
 
 #ifdef HAVE_BUILD_INFO
 #include <obj/build.h>
 // The <obj/build.h>, which is generated by the build environment (share/genbuild.sh),
 // could contain only one line of the following:
 //   - "#define BUILD_GIT_TAG ...", if the top commit is tagged
 //   - "#define BUILD_GIT_COMMIT ...", if the top commit is not tagged
 //   - "// No build information available", if proper git information is not available
 #endif
 
 //! git will put "#define GIT_COMMIT_ID ..." on the next line inside archives. $Format:%n#define GIT_COMMIT_ID "%H"$
 
 #ifdef BUILD_GIT_TAG
     #define BUILD_DESC BUILD_GIT_TAG
     #define BUILD_SUFFIX ""
 #else
-    #define BUILD_DESC "v" PACKAGE_VERSION
+    #define BUILD_DESC "v" STRINGIZE(PEERCOIN_VERSION_MAJOR) "." STRINGIZE(PEERCOIN_VERSION_MINOR) \
+                       "." STRINGIZE(PEERCOIN_VERSION_REVISION) "." STRINGIZE(PEERCOIN_VERSION_BUILD)
     #if CLIENT_VERSION_IS_RELEASE
         #define BUILD_SUFFIX ""
     #elif defined(BUILD_GIT_COMMIT)
         #define BUILD_SUFFIX "-" BUILD_GIT_COMMIT
     #elif defined(GIT_COMMIT_ID)
         #define BUILD_SUFFIX "-g" GIT_COMMIT_ID
     #else
         #define BUILD_SUFFIX "-unk"
     #endif
 #endif
@@ -53,27 +55,29 @@ static std::string FormatVersion(int nVersion)
 
 std::string FormatFullVersion()
 {
-    static const std::string CLIENT_BUILD(BUILD_DESC BUILD_SUFFIX);
+    static const std::string CLIENT_BUILD(BUILD_DESC CLIENT_VERSION_SUFFIX);
     return CLIENT_BUILD;
 }
 
 /**
  * Format the subversion field according to BIP 14 spec (https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki)
  */
 std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments)
 {
     std::ostringstream ss;
     ss << "/";
     ss << name << ":" << FormatVersion(nClientVersion);
     if (!comments.empty())
     {
         std::vector<std::string>::const_iterator it(comments.begin());
         ss << "(" << *it;
         for(++it; it != comments.end(); ++it)
             ss << "; " << *it;
         ss << ")";
     }
     ss << "/";
+    ss << "Peercoin:" << FormatVersion(PEERCOIN_VERSION);
+    ss << "(" << FormatFullVersion() << ")/";
     return ss.str();
 }
 
@@ -91,17 +95,17 @@ std::string CopyrightHolders(const std::string& strPrefix)
 
 std::string LicenseInfo()
 {
-    const std::string URL_SOURCE_CODE = "<https://github.com/bitcoin/bitcoin>";
+    const std::string URL_SOURCE_CODE = "<https://github.com/peercoin/peercoin>";
 
     return CopyrightHolders(strprintf(_("Copyright (C) %i-%i").translated, 2009, COPYRIGHT_YEAR) + " ") + "\n" +
            "\n" +
            strprintf(_("Please contribute if you find %s useful. "
                        "Visit %s for further information about the software.").translated, PACKAGE_NAME, "<" PACKAGE_URL ">") +
            "\n" +
            strprintf(_("The source code is available from %s.").translated, URL_SOURCE_CODE) +
            "\n" +
            "\n" +
            _("This is experimental software.").translated + "\n" +
            strprintf(_("Distributed under the MIT software license, see the accompanying file %s or %s").translated, "COPYING", "<https://opensource.org/licenses/MIT>") +
            "\n";
 }
